# jackmidi2osc example configuration file
#
# $XDG_CONFIG_HOME/jackmidi2osc/default.cfg is read at start if the file exists.
# this expands to
#  - on GNU/Linux, BSD, etc  $HOME/.config/jackmidi2osc/default.cfg
#  - on OSX: $HOME/Library/Preferences/jackmidi2osc/default.cfg
#  - on WIN: %localappdata%\jackmidi2osc\default.cfg
#
# additional parameters as well as custom configuration can be given on
# the commandline.
#
# The configuration consiste of a global section with key/value pairs
# followed by a set of rules to translate MIDI to OSC.
#
# lines starting with a hash (#) are ignored as are empty lines.
#
# Note that: whitespace is significant (beware of trailing spaces).
#

#### GLobal configuration
## entries are in the form    key=value
[config]
## The OSC host and (UDP) port to send data to.
## format: [ <hostname> :] <port>
#osc=some.host.com:1234
## send to localhost, port 3819
osc=5849

## Automatically connect to given jack midi port at start
## (use `jack_lsp` or your favorite jack connection manager to list ports)
## This is equivalent to the '-i' commandline option, if unset no connection
## is made at application start.
## If a port is given, but cannot be connected to, the application does not start.
#input=system_midi:capture_1
#input=Ardour:control

#timing=immediate
##timing=relative
##timing=absolute


#### MIDI -> OSC Translation rules
## The first line of each rule defines which MIDI messages triggers the rule
## all subsequent lines are OSC message(s) which are sent if the midi message match.
##
## There is no order in the rules. Any midi message will be matched against all rules
## and can trigger multiple events.


## begin a new rule
[rule]
## for all note-on/off messages with key=60 (C-3)
Note 60 ANY
## send an OSC with a fixed integer value
"/osc/test" "i" "4711"


[rule]
## The Midi filter consists of three whitespace separated fields
## which are matched against the 3 bytes of a MIDI message
## (jackmidi2osc currently only supports 3 byte message:
##  note-on, note-off, control-change, pitch-bend, song-position)
##
## For note-events the 3 bytes are
##   Type|Channel Key Velocity
##
## For control-changes
##   Type|Channel Control Value
##
## see also http://www.midi.org/techspecs/midimessages.php
##
## each of the filters are number pairs separated by a slash:
##    <match>/<byte-mask>
## The numbers can be given in decimal or hexadecimal.
## a prefix "0x" indicates the latter
##
## Furthermore the config-parser provides aliases for commonly
## used filter-masks. e.g.
CC ANY ANY
## above rule matches all control-change for all channels
## it is equivalent to
##   0xb0/0xf0 0/0 0/0
## the mask "0xf0" strips the lower nibble (channel number).
## 0xb0 is the midi-status for control-messages
##
## A mask of '0' will always return zero. Hence 0/0 will
## match any value.
##
## The mask is optional, If not given it defaults to 0xff (let all bits pass)
##
##
## OSC messages are in the format of
##    "OSC/Path" "Data-types" ...
## currently data-types 'i' (integer) 'f' (float) and 's' text-string
## are supported.
## for every type a matching parameter must be given e.g.
##   "/osc/message" "ifs" "15" "96.148" "Hello"
## The parameters can contain placeholders
##  %0 = the status-byte, range 0..255 (see midi spec, usually 128..255)
##  %1 = first data byte (key, control), range 0..127
##  %2 = second data byte (velocity, value), range 0..127
##  %c = midi-channel-number (status & 0x0f), range 0..15
##  %s = status-byte without channel (status & 0xf0)
##
## send a /midi/cc message with 3 integer parameters: the channel, the parameter and the value
"/midi/cc" "iii" "%c" "%1" "%2"
## also send a generic message without any parameters
"/midi/somecc" ""
##
## the range of the values can be mapped from a given source to a target range
##   "%<PARAM> [<TARGET-MIN>,<TARGE_MAX>]"
##   "%<PARAM> [<TARGET-MIN>,<TARGE_MAX>] [SOURCE-MIN,SOURCE_MAX]""
##
## for example the following maps the channel-number to the range 1..16
## and the value to a range 0..1 (float)
"/midi/cc1" "iif" "%c [1,16] [0,15]" "%1" "%2 [0,1]"
##
## per default the source-range matches the given parameter (0..127 for data, 0..255 for status)

## add another rule
[rule]
# all note-on messages...
NoteOn ANY ANY
# trigger a Message  channel, note/key, velocity
"/midi/noteon" "iii" "%c" "%1" "%2"

[rule]
NoteOff ANY ANY
"/midi/noteoff" "iii" "%c" "%1" "%2"

[rule]
## a note-on event on channel zero (0x90), note C-0 (24), any velocity
0x90 24/0x7f 0/0
## triggers a couple of messages
"/foo/foo" "i" "4"
"/foo/bar" "ii" "17" "%1"
"/foo/baz" "f" "%2 [-1,0]"
"/bar/foo" "if" "%1" "%2 [0.5,1.5] [16,0x50]"


## shortcuts are case-insensitive, currently the following are defined:
##  "Note"    == "0x80/0xe0"
##  "NoteOff" == "0x80/0xf0"
##  "NoteOn"  == "0x90/0xf0"
##  "CC"      == "0xb0/0xf0"
##  "ANY"     == "0x00/0x00"
